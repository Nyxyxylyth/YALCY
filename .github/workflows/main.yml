name: Build All Platforms

on:
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./YALCY

      - name: Build
        run: dotnet build --configuration Release
        working-directory: ./YALCY

      - name: Publish
        run: dotnet publish -c Release -r win-x64 --self-contained=true --output ./publish
        working-directory: ./YALCY

      - name: Upload Windows Binaries
        uses: actions/upload-artifact@v4
        with:
          name: windows-binaries
          path: ./YALCY/publish

  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./YALCY

      - name: Build
        run: dotnet build --configuration Release
        working-directory: ./YALCY

      - name: Publish
        run: dotnet publish -c Release -r linux-x64 --self-contained=true --output ./publish
        working-directory: ./YALCY

      - name: Upload Linux Binaries
        uses: actions/upload-artifact@v4
        with:
          name: linux-binaries
          path: ./YALCY/publish

  build-macos:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore
        working-directory: ./YALCY

      - name: Build
        run: dotnet build --configuration Release
        working-directory: ./YALCY

      - name: Publish
        run: dotnet publish -c Release -r osx-x64 --self-contained=true --output ./publish
        working-directory: ./YALCY

      - name: Upload macOS Binaries
        uses: actions/upload-artifact@v4
        with:
          name: macos-binaries
          path: ./YALCY/publish

  release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux, build-macos]

    steps:
      # Ensure the repository is checked out
      - name: Checkout code
        uses: actions/checkout@v3

      # Fetch all Git tags
      - name: Fetch all tags
        run: git fetch --tags

      # Determine the next version
      - name: Determine next version
        id: next_version
        run: |
          # Get the latest tag or set default
          latest_tag=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          
          # Extract major, minor, and patch from the tag
          IFS='.' read -r major minor patch <<<"${latest_tag//v/}"
          
          # Increment the patch version
          new_patch=$((patch + 1))
          next_version="v$major.$minor.$new_patch"
          
          echo "Next version: $next_version"
          echo "next_version=$next_version" >> $GITHUB_ENV

      # Print the next version for debugging purposes
      - name: Print next version
        run: echo "Next tag version is ${{ env.next_version }}"
  
      # Create the GitHub release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.next_version }}
          release_name: "YALCY ${{ env.next_version }}"
          body: |
            Automatically generated release.
            Includes:
            - Windows x64 binaries
            - Linux x64 binaries
            - macOS x64 binaries
          draft: false
          prerelease: false
        env:
           GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      # Upload Windows binaries to the release
      - name: Upload Windows Binaries to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows
          asset_name: windows-x64-binaries.zip
          asset_content_type: application/zip

      # Upload Linux binaries to the release
      - name: Upload Linux Binaries to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux
          asset_name: linux-x64-binaries.zip
          asset_content_type: application/zip

      # Upload macOS binaries to the release
      - name: Upload macOS Binaries to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos
          asset_name: macos-x64-binaries.zip
          asset_content_type: application/zip
